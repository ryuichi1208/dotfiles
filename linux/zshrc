# -----------------------------
# 環境変数
# -----------------------------
export LANG=ja_JP.UTF-8
export LESSCHARSET=utf-8
export EDITOR=vim
export RSYNC_RSH=ssh
export HISTFILE=$HOME/.zsh-history
export HISTSIZE=100000
export SAVEHIST=1000000
export WORDCHARS='*?_.[]~-=&;!#$%^(){}<>'
export LSCOLORS=Exfxcxdxbxegedabagacad
export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
export PATH="$HOME/bin:$PATH"
export PATH="$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/root/bin:/usr/local/go/bin:/root/go/bin/"
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
export FZF_DEFAULT_OPTS="--height 80% --reverse --border --preview 'bat --color=always {}'"

# -----------------------------
# Alias
# -----------------------------
alias ls='ls --color=auto'
alias la='ls -A'
alias l='ls -CF'
alias ll='ls -l'
alias mv='mv -i'
alias cp='cp -i'
alias rm='rm -i'
alias grep='grep --color=auto'
alias g='git'
alias gb='git branch'
alias gd='git diff'
alias gs='git status'
alias gp='git pull'
alias df='duf'
alias c='clear'
alias sshk='ssh-keygen -t rsa'
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias free='free -h'
alias cdg='cd-gitroot'
alias k='kubectl'
alias kg='kubectl get'
alias kd='kubectl describe'
alias d='docker'
alias dcm='docker-compose'

# -----------------------------
# General
# -----------------------------
autoload -Uz colors ; colors
setopt auto_cd
setopt auto_pushd
setopt pushd_ignore_dups
setopt no_flow_control
setopt extended_glob
setopt histignorealldups
setopt share_history
setopt hist_ignore_all_dups
setopt inc_append_history
setopt menu_complete
autoload -Uz compinit ; compinit
setopt correct
zstyle ':completion:*' menu select
setopt list_packed
zstyle ':completion::complete:*' use-cache true
autoload -U colors ; colors ; zstyle ':completion:*' list-colors "${LS_COLORS}"
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:manuals' separate-sections true
setopt magic_equal_subst
autoload -Uz vcs_info
setopt prompt_subst
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{magenta}!"
zstyle ':vcs_info:git:*' unstagedstr "%F{yellow}+"
zstyle ':vcs_info:*' formats "%F{cyan}%c%u[%b]%f"
zstyle ':vcs_info:*' actionformats '[%b|%a]'
setopt prompt_subst
autoload -U add-zsh-hook
zle -N peco-history-selection
precmd () { vcs_info }
PROMPT='
[%F{magenta}%B%n%b%f@%F{blue}%U%m%u%f:%F{green}%~%f]%F{cyan}$vcs_info_msg_0_%f %{$fg[white]%}($ZSH_KUBECTL_PROMPT)%{$reset_color%}
%F{yellow}$%f '

# -----------------------------
# source
# -----------------------------
#source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
eval "$(/opt/homebrew/bin/brew shellenv)"
[ -e /opt/homebrew/opt/asdf/libexec/asdf.sh ] && source /opt/homebrew/opt/asdf/libexec/asdf.sh
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -e ~/z ] && source ~/z/z.sh
[ -e ~/.zshrc_local ] && source ~/.zshrc_local

# -----------------------------
# bind
# -----------------------------
bindkey -e
bindkey '^R' peco-history-selection

# -----------------------------
# asdf
# -----------------------------
export fpath=(${ASDF_DIR}/completions ~/.zsh/site-functions $fpath)

# -----------------------------
# zplug
# -----------------------------
source ~/.zplug/init.zsh

zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-autosuggestions"
zplug "mollifier/cd-gitroot"
zplug "zsh-users/zsh-syntax-highlighting", defer:2
zplug "b4b4r07/enhancd", use:init.sh

if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load --verbose

# -----------------------------
# Function
# -----------------------------
function fbr() {
    local branches branch
    export FZF_DEFAULT_OPTS="--height 80% --border --reverse"
    branches=$(git branch --all -v | grep -v HEAD) &&
    branch=$(echo "$branches" |
             fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
    git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //" | sed "s#remotes/[^/]*/##")
    export FZF_DEFAULT_OPTS="--height 80% --reverse --border --preview 'bat --color=always {}'"
}

function fshow() {
    git log --graph --color=always \
            --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
        --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

function fd() {
    local dir
    dir=$(find ${1:-.} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m --reverse) \
	    && cd "$dir"
}

function cdq() {
    declare -r REPO_NAME="$(ghq list >/dev/null | fzf-tmux --reverse +m)"
    [[ -n "${REPO_NAME}" ]] && cd "$(ghq root)/${REPO_NAME}"
}

function gaa() {
    MSG=$1
    if [ -z ${MSG} ]; then
      echo "please commit message input!!"
      exit 1
    fi
    git add . && git commit -m ${MSG} && git push
}

function() {
    local namespace separator binary

    # Specify the separator between context and namespace
    zstyle -s ':zsh-kubectl-prompt:' separator separator
    if [[ -z "$separator" ]]; then
        zstyle ':zsh-kubectl-prompt:' separator '/'
    fi

    # Display the current namespace if `namespace` is true
    zstyle -s ':zsh-kubectl-prompt:' namespace namespace
    if [[ -z "$namespace" ]]; then
        zstyle ':zsh-kubectl-prompt:' namespace true
    fi

    # Specify the binary to get the information from kubeconfig (e.g. `oc`)
    zstyle -s ':zsh-kubectl-binary:' binary binary
    if [[ -z "$binary" ]]; then
        zstyle ':zsh-kubectl-prompt:' binary "kubectl"
    fi
}

add-zsh-hook precmd _zsh_kubectl_prompt_precmd
function _zsh_kubectl_prompt_precmd() {
    local kubeconfig config updated_at now context namespace ns separator modified_time_fmt binary

    zstyle -s ':zsh-kubectl-prompt:' binary binary
    if ! command -v "$binary" >/dev/null; then
      ZSH_KUBECTL_PROMPT="${binary} command not found"
      return 1
    fi

    kubeconfig="$HOME/.kube/config"
    if [[ -n "$KUBECONFIG" ]]; then
        kubeconfig="$KUBECONFIG"
    fi

    zstyle -s ':zsh-kubectl-prompt:' modified_time_fmt modified_time_fmt
    if [[ -z "$modified_time_fmt" ]]; then
      # Check the stat command because it has a different syntax between GNU coreutils and FreeBSD.
      if stat --help >/dev/null 2>&1; then
          modified_time_fmt='-c%y' # GNU coreutils
      else
          modified_time_fmt='-f%m' # FreeBSD
      fi
      zstyle ':zsh-kubectl-prompt:' modified_time_fmt $modified_time_fmt
    fi

    # KUBECONFIG environment variable can hold a list of kubeconfig files that is colon-delimited.
    # Therefore, if KUBECONFIG has been held multiple files, each files need to be checked.
    while read -d ":" config; do
        if ! now="${now}$(stat -L $modified_time_fmt "$config" 2>/dev/null)"; then
            ZSH_KUBECTL_PROMPT="$config doesn't exist"
            return 1
        fi
    done <<< "${kubeconfig}:"

    zstyle -s ':zsh-kubectl-prompt:' updated_at updated_at
    if [[ "$updated_at" == "$now" ]]; then
        return 0
    fi
    zstyle ':zsh-kubectl-prompt:' updated_at "$now"

    # Set environment variable if context is not set
    if ! context="$("$binary" config current-context 2>/dev/null)"; then
        ZSH_KUBECTL_PROMPT="current-context is not set"
        return 1
    fi

    ZSH_KUBECTL_USER="$("$binary" config view -o "jsonpath={.contexts[?(@.name==\"$context\")].context.user}")"
    ZSH_KUBECTL_CONTEXT="${context}"
    ns="$("$binary" config view -o "jsonpath={.contexts[?(@.name==\"$context\")].context.namespace}")"
    [[ -z "$ns" ]] && ns="default"
    ZSH_KUBECTL_NAMESPACE="${ns}"

    # Specify the entry before prompt (default empty)
    zstyle -s ':zsh-kubectl-prompt:' preprompt preprompt
    # Specify the entry after prompt (default empty)
    zstyle -s ':zsh-kubectl-prompt:' postprompt postprompt

    # Set environment variable without namespace
    zstyle -s ':zsh-kubectl-prompt:' namespace namespace
    if [[ "$namespace" != true ]]; then
        ZSH_KUBECTL_PROMPT="${preprompt}${context}${postprompt}"
        return 0
    fi

    zstyle -s ':zsh-kubectl-prompt:' separator separator
    ZSH_KUBECTL_PROMPT="${preprompt}${context}${separator}${ns}${postprompt}"

    return 0
}

function peco-history-selection() {
    BUFFER=`history -n 1 | tac  | awk '!a[$0]++' | peco`
    CURSOR=$#BUFFER
    zle reset-prompt
}
